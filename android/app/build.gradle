apply plugin: 'com.android.library'
apply from: 'maven-push.gradle'

android {
    flavorDimensions  "product"
    compileSdkVersion 25
    buildToolsVersion '26.0.2'
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters 'armeabi-v7a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "COGNITO_IDENTITY_POOL_ID", "***REMOVED***"
        }
        debug {
            minifyEnabled false
            buildConfigField "String", "COGNITO_IDENTITY_POOL_ID", "***REMOVED***"
        }
    }

    dexOptions {
        preDexLibraries true
    }

    // If the flavors are updated, make sure to update ViroView.java's static flavor fields.
    productFlavors {
        viro_core {
            dimension "product"
            buildConfigField "String", "dummyField", "\"BridgeOnly\""

            // ViroCore exports two shared libraries, viro-native and viro-arcore. This way we can
            // load Viro without the AR, for devices that can't support the newer libs required by
            // AR.
            externalNativeBuild {
                cmake {
                    targets "viro_native", "viro_arcore"
                    cppFlags "-std=c++14 -frtti -fcxx-exceptions"
                }
            }
        }

        viro_react {
            dimension "product"
            buildConfigField "String", "dummyField", "\"ViroReact\""

            // Note that viro_arcore does not use STL, so we can still use static STL in viro_native
            // (thereby avoiding conflicts with React Android's shared STL)
            externalNativeBuild {
                cmake {
                    targets "viro_native", "viro_arcore"
                    cppFlags "-std=c++14 -frtti -fcxx-exceptions"
                }
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    packagingOptions {
        exclude '**/libopencv_java3.so'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:25.0.0'
    implementation 'com.google.android.exoplayer:exoplayer:r2.2.0'
    implementation project(':libs:gvr')
    implementation project(':libs:arcore')
    implementation 'com.google.protobuf.nano:protobuf-javanano:3.0.0-alpha-7'
    implementation 'com.amazonaws:aws-android-sdk-core:2.2.+'
    implementation 'com.amazonaws:aws-android-sdk-ddb:2.2.+'
    implementation 'com.amazonaws:aws-android-sdk-ddb-mapper:2.2.+'
    implementation 'com.amazonaws:aws-android-sdk-cognito:2.2.+'
    implementation 'com.amazonaws:aws-android-sdk-cognitoidentityprovider:2.2.+'

}

task copyReleaseAAR(type: Copy) {
    from('build/outputs/aar')
    // Change the next line to reflect the path to your react-viro repo, this
    // script is run from ViroRenderer/android/app/
    into('../../../react-viro/android/viro_renderer/')
    include('app-viro_react-release.aar')
    rename('app-viro_react-release.aar', 'viro_renderer-release.aar')
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleViro_reactRelease') {
        task.finalizedBy 'copyReleaseAAR'
    }
}